public import sqlite.generated.*;
public import sqlite.constants.*;
public import maybe.*;



//
// SqliteError exception
//
record SqliteError (code: Int, message: String);
instance Exception (SqliteError);

overload SqliteError(code: Int, dbHandle: Pointer[sqlite3])
    = SqliteError(code, String(CStringRef(sqlite3_errmsg(dbHandle))));



//
// SqliteDB
//
record SqliteDB (handle: Pointer[sqlite3]);
overload RegularRecord?(static SqliteDB) = false;

[S | CCompatibleString?(S)]
overload SqliteDB(filename: S) --> returned: SqliteDB {
    var code = sqlite3_open(cstring(filename), &returned.handle);
    if (code != SQLITE_OK) {
        var errmsg = String(CStringRef(sqlite3_errmsg(returned.handle)));
        sqlite3_close(returned.handle);
        throw SqliteError(code, move(errmsg));
    }
}

overload BitwiseMovedType?(static SqliteDB) = true;
overload resetUnsafe(db: SqliteDB) { db.handle = null(sqlite3); }
overload destroy(db: SqliteDB) { sqlite3_close(db.handle); }



//
// SqliteStatement
//
record SqliteStatement (handle: Pointer[sqlite3_stmt]);
overload RegularRecord?(static SqliteStatement) = false;

[S | CCompatibleString?(S)]
overload SqliteStatement(db: SqliteDB, sql: S) --> returned: SqliteStatement {
    var code = sqlite3_prepare_v2(db.handle, cstring(sql), Int(size(sql)) + 1,
        &returned.handle, null(Pointer[CChar])
    );
    if (code != SQLITE_OK)
        throw SqliteError(code, db.handle);
}

overload BitwiseMovedType?(static SqliteStatement) = true;
overload resetUnsafe(st: SqliteStatement) { st.handle = null(sqlite3_stmt); }
overload destroy(st: SqliteStatement) { sqlite3_finalize(st.handle); }

resetStatement(st: SqliteStatement) { sqlite3_reset(st.handle); }
clearStatement(st: SqliteStatement) { sqlite3_clear_bindings(st.handle); }

[N, F | Integer?(N) and Float?(F)]
bindStatement(st: SqliteStatement, n: N, value: F)
    { sqlite3_bind_double(st.handle, Int(n), Double(value)); }
[N | Integer?(N)]
overload bindStatement(st: SqliteStatement, n: N, value: Bool)
    { sqlite3_bind_int(st.handle, Int(n), if (value) 1 else 0); }
[N, I | Integer?(N) and Integer?(I)]
overload bindStatement(st: SqliteStatement, n: N, value: I)
    { sqlite3_bind_int(st.handle, Int(n), Int(value)); }
[N, I | Integer?(N) and (I == Int64 or I == UInt64)]
overload bindStatement(st: SqliteStatement, n: N, value: I)
    { sqlite3_bind_int64(st.handle, Int(n), Int64(value)); }
[N | Integer?(N)]
overload bindStatement(st: SqliteStatement, n: N, value: Nothing)
    { sqlite3_bind_null(st.handle, Int(n)); }
[N | Integer?(N)]
overload bindStatement(st: SqliteStatement, n: N, static Nothing)
    { sqlite3_bind_null(st.handle, Int(n)); }
[N, S | Integer?(N) and CCompatibleString?(S)]
overload bindStatement(st: SqliteStatement, n: N, value: S)
    { sqlite3_bind_text(st.handle, Int(n), cstring(value), Int(size(value)), SQLITE_TRANSIENT); }

BindableType?(T) = CallDefined?(bindStatement, SqliteStatement, Int, T);

[N, T | Integer?(N) and BindableType?(T)]
overload bindStatement(st: SqliteStatement, n: N, value: Maybe[T])
    { bindStatement(st, n, *value); }

[..TT | allValues?(BindableType?, ..TT)]
bindStatementValues(st: SqliteStatement, ..bindings: TT) {
    var i = 1;
    ..for (binding in bindings) {
        bindStatement(st, i, binding);
        inc(i);
    }
}

[..TT | allValues?(BindableType?, ..TT)]
bindStatementTuple(st: SqliteStatement, t: Tuple[..TT]) {
    bindStatementValues(st, ..unpack(t));
}

[R | Record?(R) and allValues?(BindableType?, ..RecordFieldTypes(R))]
bindStatementRecord(st: SqliteStatement, r: R) {
    bindStatementValues(st, ..recordFields(r));
}

[S, ..TT | CCompatibleString?(S) and countValues(..TT) > 0 and allValues?(BindableType?, ..TT)]
overload SqliteStatement(db: SqliteDB, sql: S, ..bindings: TT) {
    var st = SqliteStatement(db, sql);
    bindStatementValues(st, ..bindings);
    return move(st);
}

[NS | CCompatibleString?(NS)]
overload bindStatement(st: SqliteStatement, name: NS, value)
    { bindStatement(st, sqlite3_bind_parameter_index(st.handle, cstring(name)), value); }

[..TT | allValues?(BindableType?, ..TT)]
runStatement(st: SqliteStatement, ..bindings: TT) {
    bindStatementValues(st, ..bindings);

    var code = sqlite3_step(st.handle);
    var baseCode = bitand(code, 0xFF);
    if (not inValues?(baseCode, SQLITE_OK, SQLITE_ROW, SQLITE_DONE))
        throw SqliteError(code, sqlite3_db_handle(st.handle));
    resetStatement(st);
}

[S | CCompatibleString?(S)]
overload runStatement(db: SqliteDB, sql: S) {
    var msg = Pointer[CChar]();
    var code = sqlite3_exec(db.handle, cstring(sql), sqlite3_callback(0), RawPointer(0), &msg);
    if (code != SQLITE_OK)
        throw SqliteError(code, String(CStringRef(msg)));
}

[S, ..TT | CCompatibleString?(S) and countValues(..TT) > 0 and allValues?(BindableType?, ..TT)]
overload runStatement(db: SqliteDB, sql: S, ..bindings: TT) {
    var st = SqliteStatement(db, sql);
    runStatement(st, ..bindings);
}

record NoStatementRow ();
instance Exception (NoStatementRow);

maybeStatementSingleRow(st: SqliteStatement) {
    var si = iterator(st);
    if (not hasNext?(si))
        return nothing(SqliteStatementIterator);
    return Maybe(next(si));
}

statementSingleRow(st: SqliteStatement)
    = just(maybeStatementSingleRow(st));

[T] statementValue(static T, st: SqliteStatement) = statementSingleRow(st)[0, T];

[T, S, ..TT | CCompatibleString?(S) and allValues?(BindableType?, ..TT)]
overload statementValue(static T, db: SqliteDB, sql: S, forward ..bindings: TT) {
    var st = SqliteStatement(db, sql, ..bindings);
    return statementValue(T, st);
}

[T] maybeStatementValue(static T, st: SqliteStatement) = maybe(maybeStatementSingleRow(st),
    si => Maybe(si[0, T]),
    () => nothing(T),
);

[T, S, ..TT | CCompatibleString?(S) and allValues?(BindableType?, ..TT)]
overload maybeStatementValue(static T, db: SqliteDB, sql: S, forward ..bindings: TT) {
    var st = SqliteStatement(db, sql, ..bindings);
    return maybeStatementValue(T, st);
}

[T, S, ..TT | CCompatibleString?(S) and allValues?(BindableType?, ..TT)]
overload statementValue(static T, db: SqliteDB, sql: S, forward ..bindings: TT) {
    var st = SqliteStatement(db, sql, ..bindings);
    return statementValue(T, st);
}

statementValue?(st: SqliteStatement) {
    var si = iterator(st);
    return hasNext?(si);
}

[S, ..TT | CCompatibleString?(S) and allValues?(BindableType?, ..TT)]
overload statementValue?(db: SqliteDB, sql: S, forward ..bindings: TT) {
    var st = SqliteStatement(db, sql, ..bindings);
    return statementValue?(st);
}

lastInsertedRowId(db: SqliteDB) = sqlite3_last_insert_rowid(db.handle);


//
// SqliteStatementIterator
//

// note: doesn't own the handle!
record SqliteStatementIterator (handle: Pointer[sqlite3_stmt]); 

overload iterator(st: SqliteStatement) = SqliteStatementIterator(st.handle);

// XXX assumes next() is always preceded by hasNext?()
overload hasNext?(st: SqliteStatementIterator) {
    var code = sqlite3_step(st.handle);
    var baseCode = bitand(code, 0xFF);
    if (not inValues?(baseCode, SQLITE_OK, SQLITE_ROW, SQLITE_DONE))
        throw SqliteError(code, sqlite3_db_handle(st.handle));
    return code != SQLITE_DONE;
}

overload next(st: SqliteStatementIterator) = st;

[N, F | Integer?(N) and Float?(F)]
overload index(st: SqliteStatementIterator, n: N, static F)
    = F(sqlite3_column_double(st.handle, Int(n)));

[N | Integer?(N)]
overload index(st: SqliteStatementIterator, n: N, static Bool)
    = sqlite3_column_int(st.handle, Int(n)) != 0;

[N, I | Integer?(N) and Integer?(I)]
overload index(st: SqliteStatementIterator, n: N, static I)
    = I(sqlite3_column_int(st.handle, Int(n)));

[N, I | Integer?(N) and (I == Int64 or I == UInt64)]
overload index(st: SqliteStatementIterator, n: N, static I)
    = I(sqlite3_column_int64(st.handle, Int(n)));

[N, S | Integer?(N) and String?(S)]
overload index(st: SqliteStatementIterator, n: N, static S) {
    var cstr = sqlite3_column_text(st.handle, Int(n));
    if (null?(cstr))
        return S();
    else
        return S(CStringRef(cstr));
}

[N | Integer?(N)]
overload index(st: SqliteStatementIterator, n: N, static CStringRef) {
    var cstr = sqlite3_column_text(st.handle, Int(n));
    if (null?(cstr))
        return CStringRef(cstring(""));
    else
        return CStringRef(cstr);
}

[N | Integer?(N)]
overload index(st: SqliteStatementIterator, n: N)
    = CStringRef(sqlite3_column_text(st.handle, Int(n)));

[N | Integer?(N)]
nullColumn?(st: SqliteStatementIterator, n: N)
    = sqlite3_column_type(st.handle, Int(n)) == SQLITE_NULL;

[N, T | Integer?(N) and CallDefined?(index, SqliteStatementIterator, N, Static[T])]
overload index(st: SqliteStatementIterator, n: N, static Maybe[T])
    = if (nullColumn?(st, n)) nothing(T) else Maybe(st[n, T]);

rowValues(st: SqliteStatementIterator, ..Types)
    = ..mapIndexedValues((Type, n) => st[n, Type], ..Types);

rowTuple(st: SqliteStatementIterator, ..Types)
    = Tuple(..rowValues(st, ..Types));

rowRecord(st: SqliteStatementIterator, T)
    = T(..rowValues(st, ..RecordFieldTypes(T)));



//
// withTransaction
//

withTransaction(db: SqliteDB, fn) {
    runStatement(db, "begin");

    var returnValues = Type(captureValues(..fn()))();
    try {
        returnValues = captureValues(..fn());
    } catch (ex) {
        runStatement(db, "rollback");
        throw ex;
    }

    runStatement(db, "commit");
    return ..forwardValues(returnValues);
}

// TODO: sqlite values
